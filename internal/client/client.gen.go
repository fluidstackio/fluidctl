// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for InstanceState.
const (
	Creating InstanceState = "creating"
	Deleting InstanceState = "deleting"
	Error    InstanceState = "error"
	Running  InstanceState = "running"
	Starting InstanceState = "starting"
	Stopped  InstanceState = "stopped"
	Stopping InstanceState = "stopping"
)

// Filesystem Filesystem (virtio-fs)
type Filesystem struct {
	// Id Unique identifier of the filesystem
	Id openapi_types.UUID `json:"id"`

	// Name Name of the filesystem
	Name string `json:"name"`

	// Size Size of the filesystem in GB
	Size string `json:"size"`
}

// FilesystemsPostRequest POST request for a filesystem
type FilesystemsPostRequest struct {
	// Name Name of the filesystem
	Name string `json:"name"`

	// Size Size of the filesystem in GB
	Size string `json:"size"`
}

// Instance machine instance
type Instance struct {
	// Filesystems List of filesystem UUIDs attached to the instance
	Filesystems []openapi_types.UUID `json:"filesystems"`

	// Id Unique identifier of the instance
	Id openapi_types.UUID `json:"id"`

	// Image Image URL for the instance
	Image string `json:"image"`

	// Name Name of the instance
	Name string `json:"name"`

	// Preemptible Whether the instance is preemptible
	Preemptible bool `json:"preemptible"`

	// State Possible states of a machine instance
	State InstanceState `json:"state"`

	// Type Instance type
	Type string `json:"type"`

	// UserData Base64-encoded cloud-init user data for instance initialization
	UserData *[]byte `json:"userData"`
}

// InstanceState Possible states of a machine instance
type InstanceState string

// InstanceType Machine instance type
type InstanceType struct {
	// Cpu Number of CPUs the instance type has
	Cpu int `json:"cpu"`

	// Memory Amount of memory the instance type has
	Memory string `json:"memory"`

	// Name Name of the instance type
	Name string `json:"name"`
}

// InstancesPostRequest POST request for a machine instance
type InstancesPostRequest struct {
	// Filesystems List of filesystem UUIDs attached to the instance
	Filesystems *[]openapi_types.UUID `json:"filesystems,omitempty"`

	// Image Image URL for the instance
	Image *string `json:"image,omitempty"`

	// Name Name of the instance
	Name string `json:"name"`

	// Preemptible Whether the instance is preemptible
	Preemptible *bool `json:"preemptible,omitempty"`

	// Type Instance type
	Type string `json:"type"`

	// UserData Base64-encoded cloud-init user data for instance initialization
	UserData *[]byte `json:"userData"`
}

// Project Project information
type Project struct {
	// Id Unique identifier of the project
	Id openapi_types.UUID `json:"id"`

	// Name Name of the project
	Name string `json:"name"`
}

// ProjectsPostRequest POST request for a project
type ProjectsPostRequest struct {
	// Name Name of the project
	Name string `json:"name"`
}

// XORGID defines model for X-ORG-ID.
type XORGID = openapi_types.UUID

// XPROJECTID defines model for X-PROJECT-ID.
type XPROJECTID = openapi_types.UUID

// GetCapacityParams defines parameters for GetCapacity.
type GetCapacityParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetFilesystemsParams defines parameters for GetFilesystems.
type GetFilesystemsParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostFilesystemsParams defines parameters for PostFilesystems.
type PostFilesystemsParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// DeleteFilesystemsIdParams defines parameters for DeleteFilesystemsId.
type DeleteFilesystemsIdParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetFilesystemsIdParams defines parameters for GetFilesystemsId.
type GetFilesystemsIdParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetInstancesParams defines parameters for GetInstances.
type GetInstancesParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostInstancesParams defines parameters for PostInstances.
type PostInstancesParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// DeleteInstancesIdParams defines parameters for DeleteInstancesId.
type DeleteInstancesIdParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetInstancesIdParams defines parameters for GetInstancesId.
type GetInstancesIdParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostInstancesIdActionsStartParams defines parameters for PostInstancesIdActionsStart.
type PostInstancesIdActionsStartParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostInstancesIdActionsStopParams defines parameters for PostInstancesIdActionsStop.
type PostInstancesIdActionsStopParams struct {
	// XPROJECTID Project identifier passed as a header
	XPROJECTID XPROJECTID `json:"X-PROJECT-ID"`

	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostProjectsParams defines parameters for PostProjects.
type PostProjectsParams struct {
	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// DeleteProjectsIdParams defines parameters for DeleteProjectsId.
type DeleteProjectsIdParams struct {
	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// GetProjectsIdParams defines parameters for GetProjectsId.
type GetProjectsIdParams struct {
	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PutProjectsIdParams defines parameters for PutProjectsId.
type PutProjectsIdParams struct {
	// XORGID Organization identifier passed as a header. This is optional and can normally inferred by the bearer token used for authentication.
	XORGID *XORGID `json:"X-ORG-ID,omitempty"`
}

// PostSessionJSONBody defines parameters for PostSession.
type PostSessionJSONBody struct {
	// Password The password of the user
	Password string `json:"password"`

	// Username The username of the user
	Username string `json:"username"`
}

// PostFilesystemsJSONRequestBody defines body for PostFilesystems for application/json ContentType.
type PostFilesystemsJSONRequestBody = FilesystemsPostRequest

// PostInstancesJSONRequestBody defines body for PostInstances for application/json ContentType.
type PostInstancesJSONRequestBody = InstancesPostRequest

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = ProjectsPostRequest

// PutProjectsIdJSONRequestBody defines body for PutProjectsId for application/json ContentType.
type PutProjectsIdJSONRequestBody = Project

// PostSessionJSONRequestBody defines body for PostSession for application/json ContentType.
type PostSessionJSONRequestBody PostSessionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCapacity request
	GetCapacity(ctx context.Context, params *GetCapacityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesystems request
	GetFilesystems(ctx context.Context, params *GetFilesystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesystemsWithBody request with any body
	PostFilesystemsWithBody(ctx context.Context, params *PostFilesystemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilesystems(ctx context.Context, params *PostFilesystemsParams, body PostFilesystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFilesystemsId request
	DeleteFilesystemsId(ctx context.Context, id openapi_types.UUID, params *DeleteFilesystemsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesystemsId request
	GetFilesystemsId(ctx context.Context, id openapi_types.UUID, params *GetFilesystemsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceTypes request
	GetInstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstances request
	GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesWithBody request with any body
	PostInstancesWithBody(ctx context.Context, params *PostInstancesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, params *PostInstancesParams, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstancesId request
	DeleteInstancesId(ctx context.Context, id openapi_types.UUID, params *DeleteInstancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesId request
	GetInstancesId(ctx context.Context, id openapi_types.UUID, params *GetInstancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesIdActionsStart request
	PostInstancesIdActionsStart(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesIdActionsStop request
	PostInstancesIdActionsStop(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsWithBody request with any body
	PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsId request
	DeleteProjectsId(ctx context.Context, id openapi_types.UUID, params *DeleteProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsId request
	GetProjectsId(ctx context.Context, id openapi_types.UUID, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectsIdWithBody request with any body
	PutProjectsIdWithBody(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectsId(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, body PutProjectsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionWithBody request with any body
	PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCapacity(ctx context.Context, params *GetCapacityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCapacityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesystems(ctx context.Context, params *GetFilesystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystemsWithBody(ctx context.Context, params *PostFilesystemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesystems(ctx context.Context, params *PostFilesystemsParams, body PostFilesystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesystemsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFilesystemsId(ctx context.Context, id openapi_types.UUID, params *DeleteFilesystemsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFilesystemsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesystemsId(ctx context.Context, id openapi_types.UUID, params *GetFilesystemsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesystemsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, params *PostInstancesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, params *PostInstancesParams, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstancesId(ctx context.Context, id openapi_types.UUID, params *DeleteInstancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstancesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesId(ctx context.Context, id openapi_types.UUID, params *GetInstancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesIdActionsStart(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesIdActionsStartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesIdActionsStop(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesIdActionsStopRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsId(ctx context.Context, id openapi_types.UUID, params *DeleteProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsId(ctx context.Context, id openapi_types.UUID, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsIdWithBody(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsId(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, body PutProjectsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCapacityRequest generates requests for GetCapacity
func NewGetCapacityRequest(server string, params *GetCapacityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/capacity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewGetFilesystemsRequest generates requests for GetFilesystems
func NewGetFilesystemsRequest(server string, params *GetFilesystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewPostFilesystemsRequest calls the generic PostFilesystems builder with application/json body
func NewPostFilesystemsRequest(server string, params *PostFilesystemsParams, body PostFilesystemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilesystemsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFilesystemsRequestWithBody generates requests for PostFilesystems with any type of body
func NewPostFilesystemsRequestWithBody(server string, params *PostFilesystemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteFilesystemsIdRequest generates requests for DeleteFilesystemsId
func NewDeleteFilesystemsIdRequest(server string, id openapi_types.UUID, params *DeleteFilesystemsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewGetFilesystemsIdRequest generates requests for GetFilesystemsId
func NewGetFilesystemsIdRequest(server string, id openapi_types.UUID, params *GetFilesystemsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewGetInstanceTypesRequest generates requests for GetInstanceTypes
func NewGetInstanceTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instance-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, params *GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, params *PostInstancesParams, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, params *PostInstancesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteInstancesIdRequest generates requests for DeleteInstancesId
func NewDeleteInstancesIdRequest(server string, id openapi_types.UUID, params *DeleteInstancesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewGetInstancesIdRequest generates requests for GetInstancesId
func NewGetInstancesIdRequest(server string, id openapi_types.UUID, params *GetInstancesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewPostInstancesIdActionsStartRequest generates requests for PostInstancesIdActionsStart
func NewPostInstancesIdActionsStartRequest(server string, id openapi_types.UUID, params *PostInstancesIdActionsStartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/actions/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewPostInstancesIdActionsStopRequest generates requests for PostInstancesIdActionsStop
func NewPostInstancesIdActionsStopRequest(server string, id openapi_types.UUID, params *PostInstancesIdActionsStopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/actions/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-PROJECT-ID", runtime.ParamLocationHeader, params.XPROJECTID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-PROJECT-ID", headerParam0)

		if params.XORGID != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam1)
		}

	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XORGID != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam0)
		}

	}

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, params *PostProjectsParams, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, params *PostProjectsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XORGID != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteProjectsIdRequest generates requests for DeleteProjectsId
func NewDeleteProjectsIdRequest(server string, id openapi_types.UUID, params *DeleteProjectsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XORGID != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam0)
		}

	}

	return req, nil
}

// NewGetProjectsIdRequest generates requests for GetProjectsId
func NewGetProjectsIdRequest(server string, id openapi_types.UUID, params *GetProjectsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XORGID != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam0)
		}

	}

	return req, nil
}

// NewPutProjectsIdRequest calls the generic PutProjectsId builder with application/json body
func NewPutProjectsIdRequest(server string, id openapi_types.UUID, params *PutProjectsIdParams, body PutProjectsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutProjectsIdRequestWithBody generates requests for PutProjectsId with any type of body
func NewPutProjectsIdRequestWithBody(server string, id openapi_types.UUID, params *PutProjectsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XORGID != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-ORG-ID", runtime.ParamLocationHeader, *params.XORGID)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-ORG-ID", headerParam0)
		}

	}

	return req, nil
}

// NewPostSessionRequest calls the generic PostSession builder with application/json body
func NewPostSessionRequest(server string, body PostSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionRequestWithBody generates requests for PostSession with any type of body
func NewPostSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCapacityWithResponse request
	GetCapacityWithResponse(ctx context.Context, params *GetCapacityParams, reqEditors ...RequestEditorFn) (*GetCapacityResponse, error)

	// GetFilesystemsWithResponse request
	GetFilesystemsWithResponse(ctx context.Context, params *GetFilesystemsParams, reqEditors ...RequestEditorFn) (*GetFilesystemsResponse, error)

	// PostFilesystemsWithBodyWithResponse request with any body
	PostFilesystemsWithBodyWithResponse(ctx context.Context, params *PostFilesystemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemsResponse, error)

	PostFilesystemsWithResponse(ctx context.Context, params *PostFilesystemsParams, body PostFilesystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemsResponse, error)

	// DeleteFilesystemsIdWithResponse request
	DeleteFilesystemsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteFilesystemsIdParams, reqEditors ...RequestEditorFn) (*DeleteFilesystemsIdResponse, error)

	// GetFilesystemsIdWithResponse request
	GetFilesystemsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetFilesystemsIdParams, reqEditors ...RequestEditorFn) (*GetFilesystemsIdResponse, error)

	// GetInstanceTypesWithResponse request
	GetInstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceTypesResponse, error)

	// GetInstancesWithResponse request
	GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstancesWithBodyWithResponse request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, params *PostInstancesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, params *PostInstancesParams, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// DeleteInstancesIdWithResponse request
	DeleteInstancesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteInstancesIdParams, reqEditors ...RequestEditorFn) (*DeleteInstancesIdResponse, error)

	// GetInstancesIdWithResponse request
	GetInstancesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInstancesIdParams, reqEditors ...RequestEditorFn) (*GetInstancesIdResponse, error)

	// PostInstancesIdActionsStartWithResponse request
	PostInstancesIdActionsStartWithResponse(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStartParams, reqEditors ...RequestEditorFn) (*PostInstancesIdActionsStartResponse, error)

	// PostInstancesIdActionsStopWithResponse request
	PostInstancesIdActionsStopWithResponse(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStopParams, reqEditors ...RequestEditorFn) (*PostInstancesIdActionsStopResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// PostProjectsWithBodyWithResponse request with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	// DeleteProjectsIdWithResponse request
	DeleteProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteProjectsIdParams, reqEditors ...RequestEditorFn) (*DeleteProjectsIdResponse, error)

	// GetProjectsIdWithResponse request
	GetProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error)

	// PutProjectsIdWithBodyWithResponse request with any body
	PutProjectsIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectsIdResponse, error)

	PutProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, body PutProjectsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectsIdResponse, error)

	// PostSessionWithBodyWithResponse request with any body
	PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)

	PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)
}

type GetCapacityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Capacity Available instance count
		Capacity int `json:"capacity"`

		// Name Available instance type
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCapacityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapacityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Filesystem
}

// Status returns HTTPResponse.Status
func (r GetFilesystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Filesystem
}

// Status returns HTTPResponse.Status
func (r PostFilesystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFilesystemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFilesystemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFilesystemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesystemsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Filesystem
}

// Status returns HTTPResponse.Status
func (r GetFilesystemsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesystemsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InstanceType
}

// Status returns HTTPResponse.Status
func (r GetInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Instance
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Instance
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInstancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r GetInstancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesIdActionsStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r PostInstancesIdActionsStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesIdActionsStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesIdActionsStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
}

// Status returns HTTPResponse.Status
func (r PostInstancesIdActionsStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesIdActionsStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r PutProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Token Authentication token
		Token *string `json:"token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCapacityWithResponse request returning *GetCapacityResponse
func (c *ClientWithResponses) GetCapacityWithResponse(ctx context.Context, params *GetCapacityParams, reqEditors ...RequestEditorFn) (*GetCapacityResponse, error) {
	rsp, err := c.GetCapacity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCapacityResponse(rsp)
}

// GetFilesystemsWithResponse request returning *GetFilesystemsResponse
func (c *ClientWithResponses) GetFilesystemsWithResponse(ctx context.Context, params *GetFilesystemsParams, reqEditors ...RequestEditorFn) (*GetFilesystemsResponse, error) {
	rsp, err := c.GetFilesystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesystemsResponse(rsp)
}

// PostFilesystemsWithBodyWithResponse request with arbitrary body returning *PostFilesystemsResponse
func (c *ClientWithResponses) PostFilesystemsWithBodyWithResponse(ctx context.Context, params *PostFilesystemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesystemsResponse, error) {
	rsp, err := c.PostFilesystemsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemsResponse(rsp)
}

func (c *ClientWithResponses) PostFilesystemsWithResponse(ctx context.Context, params *PostFilesystemsParams, body PostFilesystemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilesystemsResponse, error) {
	rsp, err := c.PostFilesystems(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesystemsResponse(rsp)
}

// DeleteFilesystemsIdWithResponse request returning *DeleteFilesystemsIdResponse
func (c *ClientWithResponses) DeleteFilesystemsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteFilesystemsIdParams, reqEditors ...RequestEditorFn) (*DeleteFilesystemsIdResponse, error) {
	rsp, err := c.DeleteFilesystemsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFilesystemsIdResponse(rsp)
}

// GetFilesystemsIdWithResponse request returning *GetFilesystemsIdResponse
func (c *ClientWithResponses) GetFilesystemsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetFilesystemsIdParams, reqEditors ...RequestEditorFn) (*GetFilesystemsIdResponse, error) {
	rsp, err := c.GetFilesystemsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesystemsIdResponse(rsp)
}

// GetInstanceTypesWithResponse request returning *GetInstanceTypesResponse
func (c *ClientWithResponses) GetInstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceTypesResponse, error) {
	rsp, err := c.GetInstanceTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceTypesResponse(rsp)
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, params *PostInstancesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, params *PostInstancesParams, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// DeleteInstancesIdWithResponse request returning *DeleteInstancesIdResponse
func (c *ClientWithResponses) DeleteInstancesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteInstancesIdParams, reqEditors ...RequestEditorFn) (*DeleteInstancesIdResponse, error) {
	rsp, err := c.DeleteInstancesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstancesIdResponse(rsp)
}

// GetInstancesIdWithResponse request returning *GetInstancesIdResponse
func (c *ClientWithResponses) GetInstancesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetInstancesIdParams, reqEditors ...RequestEditorFn) (*GetInstancesIdResponse, error) {
	rsp, err := c.GetInstancesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesIdResponse(rsp)
}

// PostInstancesIdActionsStartWithResponse request returning *PostInstancesIdActionsStartResponse
func (c *ClientWithResponses) PostInstancesIdActionsStartWithResponse(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStartParams, reqEditors ...RequestEditorFn) (*PostInstancesIdActionsStartResponse, error) {
	rsp, err := c.PostInstancesIdActionsStart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesIdActionsStartResponse(rsp)
}

// PostInstancesIdActionsStopWithResponse request returning *PostInstancesIdActionsStopResponse
func (c *ClientWithResponses) PostInstancesIdActionsStopWithResponse(ctx context.Context, id openapi_types.UUID, params *PostInstancesIdActionsStopParams, reqEditors ...RequestEditorFn) (*PostInstancesIdActionsStopResponse, error) {
	rsp, err := c.PostInstancesIdActionsStop(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesIdActionsStopResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// DeleteProjectsIdWithResponse request returning *DeleteProjectsIdResponse
func (c *ClientWithResponses) DeleteProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteProjectsIdParams, reqEditors ...RequestEditorFn) (*DeleteProjectsIdResponse, error) {
	rsp, err := c.DeleteProjectsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIdResponse(rsp)
}

// GetProjectsIdWithResponse request returning *GetProjectsIdResponse
func (c *ClientWithResponses) GetProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error) {
	rsp, err := c.GetProjectsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdResponse(rsp)
}

// PutProjectsIdWithBodyWithResponse request with arbitrary body returning *PutProjectsIdResponse
func (c *ClientWithResponses) PutProjectsIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectsIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PutProjectsIdParams, body PutProjectsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectsIdResponse, error) {
	rsp, err := c.PutProjectsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsIdResponse(rsp)
}

// PostSessionWithBodyWithResponse request with arbitrary body returning *PostSessionResponse
func (c *ClientWithResponses) PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

func (c *ClientWithResponses) PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

// ParseGetCapacityResponse parses an HTTP response from a GetCapacityWithResponse call
func ParseGetCapacityResponse(rsp *http.Response) (*GetCapacityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCapacityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Capacity Available instance count
			Capacity int `json:"capacity"`

			// Name Available instance type
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFilesystemsResponse parses an HTTP response from a GetFilesystemsWithResponse call
func ParseGetFilesystemsResponse(rsp *http.Response) (*GetFilesystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFilesystemsResponse parses an HTTP response from a PostFilesystemsWithResponse call
func ParsePostFilesystemsResponse(rsp *http.Response) (*PostFilesystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteFilesystemsIdResponse parses an HTTP response from a DeleteFilesystemsIdWithResponse call
func ParseDeleteFilesystemsIdResponse(rsp *http.Response) (*DeleteFilesystemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFilesystemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFilesystemsIdResponse parses an HTTP response from a GetFilesystemsIdWithResponse call
func ParseGetFilesystemsIdResponse(rsp *http.Response) (*GetFilesystemsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesystemsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Filesystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstanceTypesResponse parses an HTTP response from a GetInstanceTypesWithResponse call
func ParseGetInstanceTypesResponse(rsp *http.Response) (*GetInstanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InstanceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteInstancesIdResponse parses an HTTP response from a DeleteInstancesIdWithResponse call
func ParseDeleteInstancesIdResponse(rsp *http.Response) (*DeleteInstancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInstancesIdResponse parses an HTTP response from a GetInstancesIdWithResponse call
func ParseGetInstancesIdResponse(rsp *http.Response) (*GetInstancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInstancesIdActionsStartResponse parses an HTTP response from a PostInstancesIdActionsStartWithResponse call
func ParsePostInstancesIdActionsStartResponse(rsp *http.Response) (*PostInstancesIdActionsStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesIdActionsStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInstancesIdActionsStopResponse parses an HTTP response from a PostInstancesIdActionsStopWithResponse call
func ParsePostInstancesIdActionsStopResponse(rsp *http.Response) (*PostInstancesIdActionsStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesIdActionsStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsIdResponse parses an HTTP response from a DeleteProjectsIdWithResponse call
func ParseDeleteProjectsIdResponse(rsp *http.Response) (*DeleteProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsIdResponse parses an HTTP response from a GetProjectsIdWithResponse call
func ParseGetProjectsIdResponse(rsp *http.Response) (*GetProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProjectsIdResponse parses an HTTP response from a PutProjectsIdWithResponse call
func ParsePutProjectsIdResponse(rsp *http.Response) (*PutProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionResponse parses an HTTP response from a PostSessionWithResponse call
func ParsePostSessionResponse(rsp *http.Response) (*PostSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Token Authentication token
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
